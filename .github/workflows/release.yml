name: Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          fuse \
          libfuse2 \
          wget \
          dpkg-dev \
          file

    - name: Build release binary
      run: |
        cargo build --release

    - name: Strip binary
      run: |
        strip target/release/zfetch

    - name: Create .deb package structure
      run: |
        mkdir -p package/DEBIAN
        mkdir -p package/usr/bin
        mkdir -p package/usr/share/doc/zfetch
        mkdir -p package/usr/share/man/man1

    - name: Copy binary to package
      run: |
        cp target/release/zfetch package/usr/bin/
        chmod +x package/usr/bin/zfetch

    - name: Create DEBIAN control file
      run: |
        cat > package/DEBIAN/control << EOF
        Package: zfetch
        Version: ${{ github.event.release.tag_name }}
        Section: utils
        Priority: optional
        Architecture: amd64
        Depends: libc6 (>= 2.27)
        Maintainer: zfetch contributors <zfetch@example.com>
        Description: Yet another system information fetcher for Linux
         zfetch is a fast and lightweight system information fetcher written in Rust.
         It was created as an alternative to neofetch with a focus on performance,
         stability, and simplicity.
         .
         Features include:
          - Fast execution written in Rust
          - Beautiful colored output
          - Comprehensive system information display
          - Minimal mode and JSON output support
          - Memory-safe implementation
        Homepage: https://github.com/${{ github.repository }}
        EOF

    - name: Create copyright file
      run: |
        cat > package/usr/share/doc/zfetch/copyright << EOF
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: zfetch
        Upstream-Contact: zfetch contributors
        Source: https://github.com/${{ github.repository }}

        Files: *
        Copyright: 2025 zfetch contributors
        License: MIT

        License: MIT
         Permission is hereby granted, free of charge, to any person obtaining a copy
         of this software and associated documentation files (the "Software"), to deal
         in the Software without restriction, including without limitation the rights
         to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         copies of the Software, and to permit persons to whom the Software is
         furnished to do so, subject to the following conditions:
         .
         The above copyright notice and this permission notice shall be included in all
         copies or substantial portions of the Software.
         .
         THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
         SOFTWARE.
        EOF

    - name: Create changelog
      run: |
        cat > package/usr/share/doc/zfetch/changelog << EOF
        zfetch (${{ github.event.release.tag_name }}) stable; urgency=medium

          * Release ${{ github.event.release.tag_name }}
          * See https://github.com/${{ github.repository }}/releases/tag/${{ github.event.release.tag_name }} for details

         -- zfetch contributors <zfetch@example.com>  $(date -R)
        EOF
        gzip -9 package/usr/share/doc/zfetch/changelog

    - name: Create man page
      run: |
        cat > package/usr/share/man/man1/zfetch.1 << 'EOF'
        .TH ZFETCH 1 "$(date +'%B %Y')" "zfetch ${{ github.event.release.tag_name }}" "User Commands"
        .SH NAME
        zfetch \- system information fetcher for Linux
        .SH SYNOPSIS
        .B zfetch
        [\fIOPTIONS\fR]
        .SH DESCRIPTION
        zfetch is a fast and lightweight system information fetcher written in Rust.
        It displays various system information including OS, kernel, CPU, GPU, memory usage, and more.
        .SH OPTIONS
        .TP
        \fB\-m\fR, \fB\-\-minimal\fR
        Display minimal information
        .TP
        \fB\-n\fR, \fB\-\-no\-color\fR
        Disable colored output
        .TP
        \fB\-l\fR, \fB\-\-no\-logo\fR
        Don't display the logo
        .TP
        \fB\-j\fR, \fB\-\-json\fR
        Output information in JSON format
        .TP
        \fB\-h\fR, \fB\-\-help\fR
        Show help message
        .TP
        \fB\-v\fR, \fB\-\-version\fR
        Show version information
        .SH EXAMPLES
        .TP
        zfetch
        Show full system information with logo
        .TP
        zfetch \-\-minimal
        Show minimal system information
        .TP
        zfetch \-\-json
        Output system information in JSON format
        .SH AUTHORS
        Written by zfetch contributors.
        .SH REPORTING BUGS
        Report bugs to: https://github.com/${{ github.repository }}/issues
        .SH COPYRIGHT
        Copyright Â© 2025 zfetch contributors. License MIT.
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        EOF
        gzip -9 package/usr/share/man/man1/zfetch.1

    - name: Build .deb package
      run: |
        dpkg-deb --build package zfetch_${{ github.event.release.tag_name }}_amd64.deb

    - name: Download AppImage tools
      run: |
        wget -O linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy

    - name: Create AppDir structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

    - name: Copy binary to AppDir
      run: |
        cp target/release/zfetch AppDir/usr/bin/

    - name: Create desktop file
      run: |
        cat > AppDir/usr/share/applications/zfetch.desktop << EOF
        [Desktop Entry]
        Name=zfetch
        Comment=System information fetcher for Linux
        Exec=zfetch
        Icon=zfetch
        Type=Application
        Categories=System;
        Terminal=true
        EOF

    - name: Create simple icon
      run: |
        # Create a simple text-based icon (this would ideally be a proper PNG icon)
        convert -size 256x256 xc:transparent -font DejaVu-Sans-Bold -pointsize 72 \
          -fill '#00ff00' -gravity center -annotate +0+0 'zf' \
          AppDir/usr/share/icons/hicolor/256x256/apps/zfetch.png || \
        echo "Icon creation skipped (ImageMagick not available)"

    - name: Create AppImage
      run: |
        ./linuxdeploy --appdir AppDir --output appimage
        mv zfetch*.AppImage zfetch-${{ github.event.release.tag_name }}-x86_64.AppImage

    - name: Upload .deb package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./zfetch_${{ github.event.release.tag_name }}_amd64.deb
        asset_name: zfetch_${{ github.event.release.tag_name }}_amd64.deb
        asset_content_type: application/vnd.debian.binary-package

    - name: Upload AppImage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./zfetch-${{ github.event.release.tag_name }}-x86_64.AppImage
        asset_name: zfetch-${{ github.event.release.tag_name }}-x86_64.AppImage
        asset_content_type: application/octet-stream

    - name: Generate checksums
      run: |
        sha256sum zfetch_${{ github.event.release.tag_name }}_amd64.deb > checksums.txt
        sha256sum zfetch-${{ github.event.release.tag_name }}-x86_64.AppImage >> checksums.txt

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain
